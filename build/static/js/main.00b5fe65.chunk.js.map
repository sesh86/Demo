{"version":3,"sources":["components/Demo.js","App.js","components/Timer.js","serviceWorker.js","index.js","logo.svg"],"names":["EmpTbl","Component","props","emps","console","log","search","length","emp","filter","e","name","indexOf","react_default","a","createElement","className","map","title","onClick","delEmp","key","age","gender","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pauseTime","clearInterval","interval","disableButton","state","seconds","disableStart","disablePause","stop","bind","assertThisInitialized","resumeTime","_this2","setInterval","tick","setState","p_start","p_pause","p_stop","disableStop","_this3","disabled","Boolean","window","location","hostname","match","ReactDOM","render","components_Timer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6QAgBMA,SCZYC,YDFCA,YAcJ,SAACC,GACd,IAAIC,EAQJ,OAPAC,QAAQC,IAAIH,EAAMI,QAEhBH,EADED,EAAMI,OAAOC,OAAS,EACjBL,EAAMM,IAAIC,OAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,QAAQV,EAAMI,SAAW,IAGtDJ,EAAMM,IAERK,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACtBH,EAAAC,EAAAC,cAAA,aACGZ,EAAKc,IAAI,SAACT,GAAD,OAASK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeE,MAAM,kBAAkBC,QAAS,kBAAMjB,EAAMkB,OAAOZ,IAAMa,IAAKb,EAAIG,MAAME,EAAAC,EAAAC,cAAA,UAAKP,EAAIG,MAAUE,EAAAC,EAAAC,cAAA,UAAKP,EAAIc,KAAST,EAAAC,EAAAC,cAAA,UAAKP,EAAIe,sBEoB9JC,cA7Cb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1B,KAoBR8B,UAAY,WAAOC,cAAcR,EAAKS,UAAUT,EAAKU,eAAc,GAAM,GAAK,IAnB5EV,EAAKW,MAAQ,CAAEC,QAAS,EAAEC,cAAa,EAAKC,cAAa,GAGzDd,EAAKe,KAAOf,EAAKe,KAAKC,KAAVf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KALKA,mFASEG,KAAKe,4DAGHf,KAAKI,YAAY5B,QAAQC,IAAI,mEAGvC,IAAAuC,EAAAhB,KAACA,KAAKO,eAAc,GAAK,GAAM,GAAOP,KAAKM,SAAWW,YAAY,kBAAMD,EAAKE,QAAQ,oCAE1FlB,KAAKmB,SAAS,SAAAX,GAAK,MAAK,CAACC,QAASD,EAAMC,QAAU,oCAElDT,KAAKI,YAAYJ,KAAKO,eAAc,GAAM,GAAK,GAAMP,KAAKmB,SAAS,SAAAX,GAAK,MAAK,CAACC,QAAS,2CAIjFW,EAAQC,EAAQC,GAAQtB,KAAKmB,SAAS,SAAAX,GAAK,MAAG,CAACE,aAAaU,EAAQT,aAAaU,EAAQE,YAAYD,sCAG1G,IAAAE,EAAAxB,KACP,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,uBAAea,KAAKQ,MAAMC,UAE5BxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUG,QAAS,kBAAIiC,EAAKT,cAAcU,SAAUzB,KAAKQ,MAAME,cAAjF,SACAzB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUG,QAASS,KAAKI,UAAWqB,SAAUzB,KAAKQ,MAAMG,cAA1E,SACA1B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUG,QAASS,KAAKY,KAAMa,SAAUzB,KAAKQ,MAAMe,aAArE,UAEFtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,iDAxCUf,aCWAqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAAWC,SAASC,eAAe,SDyH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.00b5fe65.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Demo extends Component {\r\n  state = { emp: [{ name: \"Johnson\", age: 20, gender: 'Male' }, { name: \"Jackson\", age: 30, gender: 'Male' }, { name: \"Jimmy\", age: 25, gender: 'Male' }], search: '' }\r\n\r\n  handleChange = (e) => { this.setState({ search: e.target.value }) }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"p-3 bg-light d-line\">\r\n        <input type=\"text\" onChange={this.handleChange} />\r\n        <EmpTbl emp={this.state.emp} search={this.state.search}></EmpTbl>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst EmpTbl = (props) => {\r\n  let emps\r\n  console.log(props.search)\r\n  if (props.search.length > 0) {\r\n    emps = props.emp.filter(e => e.name.indexOf(props.search) > -1);\r\n  }\r\n  else {\r\n    emps = props.emp\r\n  }\r\n  return <table className=\"table\">\r\n    <tbody>\r\n      {emps.map((emp) => <tr className=\"link hstrike\" title=\"Click to Delete\" onClick={() => props.delEmp(emp)} key={emp.name}><td>{emp.name}</td><td>{emp.age}</td><td>{emp.gender}</td></tr>)}\r\n    </tbody>\r\n  </table>\r\n}\r\n\r\nexport default Demo;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nclass Timer extends Component {\r\n  constructor(props) {\r\n    super(props);//it is essential to use super function before using this keyword\r\n    this.state = { seconds: 0,disableStart:true,disablePause:true};\r\n    // this.pauseTime = this.pauseTime.bind(this);\r\n    // this.resumeTime = this.resumeTime.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n  }\r\n\r\n  //called on mount - the callback function runs every second\r\n  componentDidMount() {this.resumeTime();}\r\n\r\n  //wher to use this lifecycle method? let's see after routes and redux\r\n  componentWillUnmount(){this.pauseTime();console.log('componentWillUnmount Timer');}\r\n  // componentDidMount() {this.resumeTime();setTimeout(()=>{this.props.history.push('/')},2020);}\r\n\r\n  resumeTime() {this.disableButton(true,false,false);this.interval = setInterval(() => this.tick(), 1000);}\r\n  \r\n  tick() {this.setState(state => ({seconds: state.seconds + 1}));}\r\n\r\n  stop() {this.pauseTime();this.disableButton(false,true,true);this.setState(state => ({seconds: 0}));}\r\n\r\n  pauseTime = () => {clearInterval(this.interval);this.disableButton(false,true,true);}\r\n\r\n  disableButton(p_start,p_pause,p_stop){this.setState(state=>({disableStart:p_start,disablePause:p_pause,disableStop:p_stop}));}\r\n\r\n /*<div class=\"container bg-secondary p-3\">Seconds: {this.state.seconds}</div>//components state will be displayed*/\r\n  render() {\r\n    return (\r\n      <div className=\"bg-secondary p-5\">\r\n        <h4 className=\"text-white\">Timer</h4>\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <div>Seconds: {this.state.seconds}</div>\r\n          </div>\r\n          <div className=\"card-body m-3\">\r\n            <button className=\"btn m-1\" onClick={()=>this.resumeTime()} disabled={this.state.disableStart}>Start</button>\r\n            <button className=\"btn m-1\" onClick={this.pauseTime} disabled={this.state.disablePause}>Pause</button>\r\n            <button className=\"btn m-1\" onClick={this.stop} disabled={this.state.disableStop}>Clear</button>\r\n          </div>\r\n          <div className=\"card-footer text-muted\">Use the buttons to control the timer</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Demo from './components/Demo';\r\nimport Timer from './components/Timer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Timer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}